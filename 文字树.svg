<svg width="800" height="600" viewBox="0 0 800 600" xmlns="http://www.w3.org/2000/svg">
  <style>
    .text-branch { font-family: "SimHei", "黑体", sans-serif; text-anchor: middle; dominant-baseline: middle; }
    .text-leaf { font-family: "KaiTi", "楷体", sans-serif; text-anchor: middle; dominant-baseline: middle; }
  </style>
  <script type="text/javascript"><![CDATA[
    // 文字库
    const words = "腰酸背痛爱吃爱玩爱睡觉".split('');
    
    // 随机数生成函数
    function random(min, max) {
      return Math.random() * (max - min) + min;
    }
    
    // 文字树绘制函数
    function drawTextTree(x, y, length, angle, depth) {
      if (depth <= 0) return;
      
      // 计算新的终点位置
      const newX = x + Math.cos(angle) * length;
      const newY = y + Math.sin(angle) * length;
      
      // 随机选择文字
      const word = words[Math.floor(Math.random() * words.length)];
      
      // 树干和主要树枝使用较大的文字和深色
      if (depth > 3) {
        const text = document.createElementNS("http://www.w3.org/2000/svg", "text");
        text.setAttribute("x", (x + newX) / 2);
        text.setAttribute("y", (y + newY) / 2);
        text.setAttribute("class", "text-branch");
        text.setAttribute("font-size", 14 + depth * 2);
        text.setAttribute("fill", `hsl(${30}, ${70}%, ${20 + depth * 5}%)`);
        text.setAttribute("transform", `rotate(${(angle * 180 / Math.PI) + 90}, ${(x + newX) / 2}, ${(y + newY) / 2})`);
        text.textContent = word;
        document.querySelector("svg").appendChild(text);
      } else {
        // 小树枝和树叶使用较小的文字和浅色
        const text = document.createElementNS("http://www.w3.org/2000/svg", "text");
        text.setAttribute("x", newX);
        text.setAttribute("y", newY);
        text.setAttribute("class", "text-leaf");
        text.setAttribute("font-size", 10 + depth * 2);
        text.setAttribute("fill", `hsl(${120 - depth * 20}, ${80}%, ${40 + depth * 10}%)`);
        text.textContent = word;
        document.querySelector("svg").appendChild(text);
      }
      
      // 随机分支角度和长度
      const branchAngle = random(0.3, 0.8);
      const newLength = length * random(0.6, 0.8);
      
      // 递归绘制左右分支
      drawTextTree(newX, newY, newLength, angle - branchAngle, depth - 1);
      drawTextTree(newX, newY, newLength, angle + branchAngle, depth - 1);
    }
    
    // 从底部中心开始绘制树
    drawTextTree(400, 550, 100, -Math.PI/2, 7);
  ]]></script>
</svg>
