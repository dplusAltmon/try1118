<svg width="800" height="600" viewBox="0 0 800 600" xmlns="http://www.w3.org/2000/svg">
  <style>
    .trunk { font-family: "SimHei", "黑体", sans-serif; text-anchor: middle; dominant-baseline: middle; font-weight: bold; }
    .branch { font-family: "KaiTi", "楷体", sans-serif; text-anchor: middle; dominant-baseline: middle; }
    .leaf { font-family: "Microsoft YaHei", "微软雅黑", sans-serif; text-anchor: middle; dominant-baseline: middle; }
  </style>
  <script type="text/javascript"><![CDATA[
    // 词组库
    const phrases = ["腰酸背痛", "爱吃", "爱玩", "爱睡觉"];
    
    // 随机数生成函数
    function random(min, max) {
      return Math.random() * (max - min) + min;
    }
    
    // 从词组库中随机选择一个词组
    function randomPhrase() {
      return phrases[Math.floor(Math.random() * phrases.length)];
    }
    
    // 绘制文字树干
    function drawTrunk(x, y, height, depth) {
      const trunkPhrase = "腰酸背痛"; // 树干固定使用"腰酸背痛"
      const fontSize = 24 - depth * 2; // 树干越往上文字越小
      const phraseHeight = fontSize * 1.2; // 每个词组的高度
      
      // 计算树干需要的词组数量
      const phrasesNeeded = Math.ceil(height / phraseHeight);
      
      // 绘制树干词组
      for (let i = 0; i < phrasesNeeded; i++) {
        const phraseY = y - i * phraseHeight;
        const text = document.createElementNS("http://www.w3.org/2000/svg", "text");
        text.setAttribute("x", x);
        text.setAttribute("y", phraseY);
        text.setAttribute("class", "trunk");
        text.setAttribute("font-size", fontSize);
        text.setAttribute("fill", `hsl(${120}, ${60}%, ${20 + depth * 5}%)`);
        text.textContent = trunkPhrase;
        document.querySelector("svg").appendChild(text);
      }
      
      // 返回树干顶部位置
      return y - height;
    }
    
    // 绘制文字树枝
    function drawBranch(x, y, length, angle, depth) {
      if (depth <= 0) return;
      
      // 计算新的终点位置
      const newX = x + Math.cos(angle) * length;
      const newY = y + Math.sin(angle) * length;
      
      // 随机选择词组
      const phrase = randomPhrase();
      
      // 树枝粗细和文字大小
      const fontSize = 16 - depth * 2;
      const phraseLength = phrase.length * fontSize * 0.6; // 词组近似长度
      
      // 计算词组数量
      const phrasesNeeded = Math.ceil(length / phraseLength);
      
      // 绘制树枝上的词组
      for (let i = 0; i < phrasesNeeded; i++) {
        const posX = x + Math.cos(angle) * (i * phraseLength);
        const posY = y + Math.sin(angle) * (i * phraseLength);
        
        const text = document.createElementNS("http://www.w3.org/2000/svg", "text");
        text.setAttribute("x", posX);
        text.setAttribute("y", posY);
        text.setAttribute("class", "branch");
        text.setAttribute("font-size", fontSize);
        text.setAttribute("fill", `hsl(${120 - depth * 10}, ${70}%, ${30 + depth * 10}%)`);
        text.setAttribute("transform", `rotate(${(angle * 180 / Math.PI) + 90}, ${posX}, ${posY})`);
        text.textContent = phrase;
        document.querySelector("svg").appendChild(text);
      }
      
      // 随机分支角度和长度
      const branchAngle = random(0.4, 0.7);
      const newLength = length * random(0.6, 0.8);
      
      // 递归绘制左右分支
      drawBranch(newX, newY, newLength, angle - branchAngle, depth - 1);
      drawBranch(newX, newY, newLength, angle + branchAngle, depth - 1);
      
      // 在末端添加树叶
      if (depth <= 1) {
        const leafPhrase = randomPhrase();
        const leafText = document.createElementNS("http://www.w3.org/2000/svg", "text");
        leafText.setAttribute("x", newX);
        leafText.setAttribute("y", newY);
        leafText.setAttribute("class", "leaf");
        leafText.setAttribute("font-size", 14);
        leafText.setAttribute("fill", `hsl(${120 - depth * 20}, ${80}%, ${50 + depth * 10}%)`);
        leafText.textContent = leafPhrase;
        document.querySelector("svg").appendChild(leafText);
      }
    }
    
    // 从底部中心开始绘制树
    const trunkTop = drawTrunk(400, 550, 200, 3);
    drawBranch(400, trunkTop, 100, -Math.PI/2, 4);
  ]]></script>
</svg>
